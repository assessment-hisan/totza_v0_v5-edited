"use client"
import React, { useEffect, useState } from "react"
import { useStore } from "../../stores/useStore"
import { useMemo } from "react";
import { PlusCircle } from "lucide-react";

const AddTransactionForm = ({onClose}) => {
  // Mock useStore actions and data for the form
  const projects = useStore(state => state.projects);
  const vendors = useStore(state => state.vendors);
  const workers = useStore(state => state.workers);
  const partners = useStore(state => state.partners);
  const transactions = useStore(state => state.transactions)
  const addTransaction = useStore(state => state.addTransaction);
  const [formData, setFormData] = useState({
    amount: '',
    type: 'Debit', // Default to Debit
    date: new Date().toISOString().substring(0, 10), // yyyy-mm-dd
    account: '',
    project: '',
    partner: '',
    vendor: '',
    worker: '',
    // entities: '', // Removed as it's now auto-generated
    description: '',
    files: [], // To store file objects (name, url for UI only)
  });

  // Helper to get name from ID
  const getNameById = (id, list, nameKey = 'name') => {
    const item = list.find(item => item.id === id);
    return item ? (nameKey === 'companyName' ? item.companyName : item.name) : null;
  };

  // Auto-generate entities string
// AddTransactionForm.jsx  (inside useMemo)
const autoGeneratedEntities = useMemo(() => {
  const { project, partner, vendor, worker } = formData;
  const flowParts = [];

  // Partner
  if (partner) {
    const partnerName = getNameById(partner, partners);
    if (partnerName) flowParts.push(partnerName);
  }

  // Project
  if (project) {
    const projectName = getNameById(project, projects);
    if (projectName) flowParts.push(projectName);
  }

  // Worker OR Vendor (mutually exclusive)
  if (worker) {
    const workerName = getNameById(worker, workers);
    if (workerName) flowParts.push(workerName);
  } else if (vendor) {
    const vendorName = getNameById(vendor, vendors, 'companyName');
    if (vendorName) flowParts.push(vendorName);
  }

  return flowParts.join(' → ') || '—';
}, [formData.project, formData.partner, formData.vendor, formData.worker, projects, partners, vendors, workers]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => {
      let newState = { ...prev, [name]: value };

      // Mutual exclusivity for vendor and worker
      if (name === 'vendor' && value) {
        newState.worker = ''; // Clear worker if vendor is selected
      } else if (name === 'worker' && value) {
        newState.vendor = ''; // Clear vendor if worker is selected
      }
      return newState;
    });
  };

  const handleFileChange = (e) => {
    const newFiles = Array.from(e.target.files).map(file => ({
      name: file.name,
      url: URL.createObjectURL(file) // Create object URL for preview/mock
    }));
    setFormData(prev => ({ ...prev, files: [...prev.files, ...newFiles] }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const newTransaction = {
      id: crypto.randomUUID(), // Generate unique ID
      date: new Date(formData.date).toISOString(),
      amount: parseFloat(formData.amount),
      type: formData.type,
      account: { name: formData.account },
      purpose: formData.description.substring(0, 50), // Short purpose from description
      entities: autoGeneratedEntities, // Use the auto-generated string
      description: formData.description,
      files: formData.files,
      // Link selected entities (for internal use, not directly displayed in table columns)
      linkedProject: formData.project,
      linkedPartner: formData.partner,
      linkedVendor: formData.vendor,
      linkedWorker: formData.worker,
      originalDueAmount: parseFloat(formData.amount) || 0,
      dueDate: formData.dueDate || new Date().toISOString().substring(0, 10), 
    };

  

    // Reset form
    setFormData({
      amount: '',
      type: 'Debit',
      account: '',
      project: '',
      partner: '',
      vendor: '',
      worker: '',
      // entities: '', // No longer needed to reset, it's derived
      description: '',
      files: [],
    });

  
     const { addTransaction } = useStore.getState();
 addTransaction(newTransaction);
 onClose()
  };

  return (
    <div className="bg-slate-100 p-6 rounded-lg shadow-lg mb-8 font-inter">
   
      <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* Amount */}
        <div>
          <label htmlFor="amount" className="block text-sm font-medium text-gray-700 mb-1">Amount (₹)</label>
          <input
            type="number"
            id="amount"
            name="amount"
            value={formData.amount}
            onChange={handleChange}
            required
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2.5"
            placeholder="e.g., 5000"
          />
        </div>
 {/* Date */}
        <div>
          <label htmlFor="date" className="block text-sm font-medium text-gray-700 mb-1">Date</label>
          <input
            type="date"
            id="date"
            name="date"
            value={formData.date}
            onChange={handleChange}
            required
           className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2.5"
          />
        </div>
        {/* Type */}
        <div>
          <label htmlFor="type" className="block text-sm font-medium text-gray-700 mb-1">Transaction Type</label>
          <select
            id="type"
            name="type"
            value={formData.type}
            onChange={handleChange}
            required
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2.5 bg-white"
          >
            <option value="Debit">Debit</option>
            <option value="Credit">Credit</option>
            <option value="Due">Due</option>
          </select>
        </div>

        {/* Account */}
        <div>
          <label htmlFor="account" className="block text-sm font-medium text-gray-700 mb-1">Account</label>
          <input
            type="text"
            id="account"
            name="account"
            value={formData.account}
            onChange={handleChange}
            required
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2.5"
            placeholder="e.g., Company Bank, Cash, Partner A"
          />
        </div>

        {/* Project Link */}
        <div>
          <label htmlFor="project" className="block text-sm font-medium text-gray-700 mb-1">Link to Project</label>
          <select
            id="project"
            name="project"
            value={formData.project}
            onChange={handleChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2.5 bg-white"
          >
            <option value="">Select Project (Optional)</option>
            {projects.map(p => (
              <option key={p.id} value={p.id}>{p.name}</option>
            ))}
          </select>
        </div>

        {/* Partner Link */}
        <div>
          <label htmlFor="partner" className="block text-sm font-medium text-gray-700 mb-1">Link to Partner</label>
          <select
            id="partner"
            name="partner"
            value={formData.partner}
            onChange={handleChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2.5 bg-white"
          >
            <option value="">Select Partner (Optional)</option>
            {partners.map(p => (
              <option key={p.id} value={p.id}>{p.name}</option>
            ))}
          </select>
        </div>

        {/* Vendor Link */}
        <div>
          <label htmlFor="vendor" className="block text-sm font-medium text-gray-700 mb-1">Link to Vendor</label>
          <select
            id="vendor"
            name="vendor"
            value={formData.vendor}
            onChange={handleChange}
            disabled={!!formData.worker}
            className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2.5 bg-white ${!!formData.worker ? 'bg-gray-100 cursor-not-allowed' : ''}`}
          >
            <option value="">Select Vendor (Optional)</option>
            {vendors.map(v => (
              <option key={v.id} value={v.id}>{v.companyName ||v.name}</option>
            ))}
          </select>
        </div>

        {/* Worker Link */}
        <div>
          <label htmlFor="worker" className="block text-sm font-medium text-gray-700 mb-1">Link to Worker</label>
          <select
            id="worker"
            name="worker"
            value={formData.worker}
            onChange={handleChange}
            
            className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2.5 bg-white ${!!formData.vendor ? 'bg-gray-100 cursor-not-allowed' : ''}`}
          >
            <option value="">Select Worker (Optional)</option>
            {workers.map(w => (
              <option key={w.id} value={w.id}>{w.name}</option>
            ))}
          </select>
        </div>

        {/* Auto-generated Entities / Transaction Flow (hidden input for form data) */}
        {/* <input type="hidden" name="entities" value={autoGeneratedEntities} /> */}
        {/* Display the auto-generated flow for user reference */}
        <div className="md:col-span-2">
          <label htmlFor="displayEntities" className="block text-sm font-medium text-gray-700 mb-1">Auto-generated Transaction Flow</label>
          <div id="displayEntities" className="mt-1 block w-full rounded-md border border-gray-300 bg-gray-50 text-gray-700 p-2.5 text-sm">
            {autoGeneratedEntities || 'Select entities to generate flow'}
          </div>
        </div>

        {/* Description */}
        <div className="md:col-span-3">
          <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">Description</label>
          <textarea
            id="description"
            name="description"
            rows="3"
            value={formData.description}
            onChange={handleChange}
            required
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2.5"
            placeholder="Detailed description of the transaction..."
          ></textarea>
        </div>

        {/* File Upload */}
        <div className="md:col-span-3">
          <label htmlFor="files" className="block text-sm font-medium text-gray-700 mb-1">Attach Files (Optional)</label>
          <input
            type="file"
            id="files"
            name="files"
            multiple
            onChange={handleFileChange}
            className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 cursor-pointer"
          />
          {formData.files.length > 0 && (
            <div className="mt-2 text-sm text-gray-600">
              <p className="font-medium">Attached Files:</p>
              <ul className="list-disc list-inside">
                {formData.files.map((file, index) => (
                  <li key={index} className="flex items-center gap-1">
                    <FileText size={14} className="text-gray-400" /> {file.name}
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>

        {/* Submit Button */}
        <div className="md:col-span-3 flex justify-end">
          <button
            type="submit"
            className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
          >
            <PlusCircle size={20} className="mr-2" /> Add Transaction
          </button>
        </div>
      </form>
    </div>
  );
};

export default AddTransactionForm
